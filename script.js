
// Dictionnaire associant les codes m√©t√©o personnalis√©s aux chemins des images correspondantes
const weatherIcons = {
    0: "img/soleil.png",         // 0 ‚Üí ciel clair : ic√¥ne soleil
    1: "img/pluvieux.png",       // 1 ‚Üí partiellement nuageux (ici ic√¥ne pluvieux, mais attention, c‚Äôest trompeur)
    2: "img/orage.png",          // 2 ‚Üí orage : ic√¥ne orage
    3: "img/couvert.png",        // 3 ‚Üí couvert : ic√¥ne ciel couvert
    4: "img/nuageux.png",        // 4 ‚Üí nuageux : ic√¥ne nuageux
    5: "img/nuage-pluie.png"     // 5 ‚Üí pluie l√©g√®re : ic√¥ne nuage + pluie l√©g√®re
};


// Fonction qui convertit un code m√©t√©o Open-Meteo en un code personnalis√© pour choisir l‚Äôic√¥ne correspondante
function mapWeatherCodeToCustomCode(weathercode) {

    if (weathercode === 0) return 0;                      // 0 = ciel clair ‚Üí ic√¥ne 0 (soleil.png)
    if (weathercode === 1) return 0;                      // 1 = principalement clair ‚Üí aussi ic√¥ne 0 (soleil.png)

    if (weathercode === 2) return 3;                      // 2 = partiellement nuageux ‚Üí ic√¥ne 3 (couvert.png)
    if (weathercode === 3) return 3;                      // 3 = couvert ‚Üí ic√¥ne 3 (couvert.png)

    if ([45, 48].includes(weathercode)) return 3;         // 45, 48 = brouillard ou brouillard givrant ‚Üí ic√¥ne 3 (couvert.png ou nuageux.png par d√©faut)

    if ([51, 53, 55, 61, 63, 65].includes(weathercode)) return 4; // codes pluie l√©g√®re √† mod√©r√©e ‚Üí ic√¥ne 4 (nuageux.png)

    if ([71, 73, 75].includes(weathercode)) return 5;     // codes neige l√©g√®re ‚Üí ic√¥ne 5 (nuage-pluie.png ici, mais √ßa devrait √™tre une ic√¥ne neige si possible)

    if ([95, 96, 99].includes(weathercode)) return 2;     // codes orage ‚Üí ic√¥ne 2 (orage.png)

    return 3; // Par d√©faut (codes non list√©s) ‚Üí ic√¥ne 3 (couvert.png)
}


// Fonction pour obtenir les coordonn√©es (latitude/longitude) √† partir du nom d'une ville
async function getCoordinates(city) {
    // URL de l'API de g√©ocodage (Open-Meteo), encodeURIComponent permet de g√©rer les espaces et caract√®res sp√©ciaux
    const url = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(city)}&count=1`;

    // Requ√™te HTTP √† l'API
    const response = await fetch(url);
    const data = await response.json();

    console.log(data.results); // Affiche les r√©sultats dans la console pour d√©bogage

    // V√©rifie que des r√©sultats existent
    if (data.results && data.results.length > 0) {
        // On r√©cup√®re les infos principales du 1er r√©sultat (le plus pertinent)
        const { latitude, longitude, name, country } = data.results[0];
        return { latitude, longitude, name, country }; // Retourne les coordonn√©es + nom + pays
    } else {
        // En cas d'absence de r√©sultat
        throw new Error("Ville introuvable");
    }
}



// Fonction pour obtenir les donn√©es m√©t√©o √† partir des coordonn√©es g√©ographiques
async function getWeather(latitude, longitude) {
    // Appel de l‚ÄôAPI m√©t√©o Open-Meteo pour r√©cup√©rer la m√©t√©o actuelle
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true&timezone=auto`;
    const response = await fetch(url);
    const data = await response.json();

    // Si les donn√©es m√©t√©o actuelles sont disponibles
    if (data.current_weather) {
        return {
            temperature: data.current_weather.temperature,     // temp√©rature en ¬∞C
            weathercode: data.current_weather.weathercode,     // code m√©t√©o (ex: ciel clair, pluie, etc.)
            is_day: data.current_weather.is_day                // 1 = jour, 0 = nuit
        };
    } else {
        throw new Error("Donn√©es m√©t√©o indisponibles");
    }
}



// Quand l'utilisateur clique sur le bouton "üîç"
document.getElementById('search-btn').addEventListener('click', async () => {
    // R√©cup√®re la valeur saisie dans la barre de recherche
    const cityInput = document.getElementById('search-bar').value.trim();

    // V√©rifie que l‚Äôutilisateur a bien entr√© quelque chose
    if (!cityInput) {
        alert('Merci de saisir une ville');
        return;
    }

    try {
        //  Obtenir les coordonn√©es de la ville
        const { latitude, longitude, name } = await getCoordinates(cityInput);

        //  Obtenir la m√©t√©o √† partir des coordonn√©es
        const { temperature, weathercode, is_day } = await getWeather(latitude, longitude );

        //  Modifier le fond de la page selon jour/nuit
        const body = document.body;
        if (is_day === 1) {
            body.style.background = "linear-gradient(to bottom, #1faee7ff, #fff)"; // fond clair pour le jour
              
        } else {
            body.style.background = "linear-gradient(to bottom, #051e44ff, #000)"; // fond sombre pour la nuit
        } 
        

        //  Mise √† jour des coordonn√©es affich√©es
        document.getElementById("latitude-bar").value = latitude;
        document.getElementById("longitude-bar").value = longitude;

        //  Mise √† jour des infos m√©t√©o dans la page
        document.getElementById('city-name').textContent = name; // nom de la ville
        document.getElementById('temperaturee').textContent = ` ${temperature} ¬∞C`; // temp√©rature

        //  Affichage de l‚Äôic√¥ne m√©t√©o
        const customCode = mapWeatherCodeToCustomCode(weathercode); // conversion du code m√©t√©o
        const iconSrc = weatherIcons[customCode] || "img/.png";     // chemin de l‚Äôic√¥ne
        document.getElementById("weather-icon").src = iconSrc;

    } catch (err) {
        //  Gestion des erreurs (ville non trouv√©e, probl√®me API, etc.)
        alert(err.message);
        document.getElementById('city-name').textContent = '';      // Vide le champ nom de ville
        document.getElementById('temperaturee').textContent = ' ¬∞C'; // Vide le champ temp√©rature
        document.getElementById("weather-icon").src = "";           // Supprime l‚Äôic√¥ne
    }
});


function getMyPosition() {
        // V√©rifie si la g√©olocalisation est disponible dans le navigateur
    if ("geolocation" in navigator) {
        // Si oui, tente de r√©cup√©rer la position
        navigator.geolocation.getCurrentPosition(
            onPosition, // Callback en cas de succ√®s (d√©j√† d√©finie dans ton autre code)
            () => {
                alert("Impossible de r√©cup√©rer votre position."); // En cas d‚Äôerreur
            }
        );
    } else {
        // Si la g√©olocalisation n'est pas support√©e
        alert("G√©olocalisation non support√©e !");
    }
}


// Fonction asynchrone qui sera appel√©e lorsqu'une position g√©ographique est obtenue
async function onPosition(position_obj) {
    // R√©cup√®re la latitude et la longitude √† partir de l'objet de position
    const latitude = position_obj.coords.latitude;
    const longitude = position_obj.coords.longitude;

    // Met √† jour les champs de coordonn√©es dans l'interface utilisateur
    document.getElementById('latitude-bar').value = latitude;
    document.getElementById('longitude-bar').value = longitude;

    try {
        // Appelle une fonction asynchrone pour obtenir la m√©t√©o √† partir des coordonn√©es
        const { temperature, weathercode , is_day} = await getWeather(latitude, longitude);

        // Met √† jour l'affichage de la ville et de la temp√©rature
        document.getElementById('city-name').textContent = "Ma position";
        document.getElementById('temperaturee').textContent = ` ${temperature} ¬∞C`;

        // Convertit le code m√©t√©o en un code personnalis√© pour choisir l'ic√¥ne appropri√©e
        const customCode = mapWeatherCodeToCustomCode(weathercode);
        
        // Change le background en fonction de la meteo
        const body = document.body;
        if (is_day === 1) {
            body.style.background = "linear-gradient(to bottom, #1faee7ff, #fff)"; // fond clair pour le jour
              
        } else {
            body.style.background = "linear-gradient(to bottom, #051e44ff, #000)"; // fond sombre pour la nuit
        } 

        // R√©cup√®re l'URL de l'ic√¥ne m√©t√©o correspondante √† ce code
        const iconSrc = weatherIcons[customCode] || ""; // Si aucun code trouv√©, ic√¥ne vide

        // Met √† jour l'image de l'ic√¥ne m√©t√©o dans l'interface
        document.getElementById("weather-icon").src = iconSrc;

    } catch (err) {
        // En cas d'erreur (ex. : √©chec de l'appel √† l'API m√©t√©o), afficher une alerte
        alert("Erreur lors de la r√©cup√©ration de la m√©t√©o : " + err.message);

        // R√©initialise les informations m√©t√©o affich√©es
        document.getElementById('city-name').textContent = '';
        document.getElementById('temperaturee').textContent = ' ¬∞C';
        document.getElementById("weather-icon").src = "";
        
    }
}




